/*******************************************************************************
 * Copyright (c) 2017 Chalmers | University of Gothenburg, rt-labs and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Chalmers | University of Gothenburg and rt-labs - initial API and implementation and/or initial documentation
 *******************************************************************************/
package org.eclipse.capra.core.handlers;

import java.lang.reflect.ParameterizedType;
<<<<<<< HEAD
import java.util.ArrayList;
import java.util.List;

import org.eclipse.capra.core.adapters.Connection;
import org.eclipse.emf.ecore.EObject;
=======
import java.util.Optional;
import java.util.function.BiFunction;
>>>>>>> 69f6db53a8fae491968cf438522a731ab5c8fd46

public abstract class AbstractArtifactHandler<T> implements IArtifactHandler<T> {

	@Override
	public <R> Optional<R> withCastedHandler(Object artifact, BiFunction<IArtifactHandler<T>, T, R> handleFunction) {
		if (canHandleArtifact(artifact)) {
			@SuppressWarnings("unchecked")
			T a = (T) artifact;
			return Optional.of(handleFunction.apply(this, a));
		} else {
			return Optional.empty();
		}
	}

	@Override
	public <R> R withCastedHandlerUnchecked(Object artifact, BiFunction<IArtifactHandler<T>, T, R> handleFunction) {
		return withCastedHandler(artifact, handleFunction).orElseThrow(
			() -> new IllegalArgumentException("withCastedHanderUnchecked called with unhandleble artifact."
				+ " Artifact: " + artifact + ", handler: " + this));
	}

	@Override
	public boolean canHandleArtifact(Object artifact) {
		try {
			Class<?> genericType = ((Class<?>) ((ParameterizedType) this.getClass().getGenericSuperclass())
					.getActualTypeArguments()[0]);
			return genericType.isAssignableFrom(artifact.getClass());
		} catch (NoClassDefFoundError e) {
			return false;
		}
	}

<<<<<<< HEAD
	@Override
	public void addInternalLinks(EObject investigatedElement, List<Connection> allElements,
			ArrayList<String> duplicationCheck, List<String> selectedRelationshipTypes) {
		// TODO Auto-generated method stub
	}

	@Override
	public String isThereAnInternalTraceBetween(EObject first, EObject second, EObject traceModel) {
		return "";
	}
=======
	@SuppressWarnings("unchecked")
	@Override
	public Class<T> getHandledClass() {
		return (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];
	}

>>>>>>> 69f6db53a8fae491968cf438522a731ab5c8fd46
}
